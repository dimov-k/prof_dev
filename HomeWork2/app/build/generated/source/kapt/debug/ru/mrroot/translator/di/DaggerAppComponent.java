// Generated by Dagger (https://dagger.dev).
package ru.mrroot.translator.di;

import androidx.lifecycle.ViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.List;
import java.util.Map;
import javax.inject.Provider;
import ru.mrroot.translator.di.module.AppModule;
import ru.mrroot.translator.di.module.RepositoryModule;
import ru.mrroot.translator.di.module.RepositoryModule_DataSourceLocalFactory;
import ru.mrroot.translator.di.module.RepositoryModule_DataSourceRemoteFactory;
import ru.mrroot.translator.di.module.RepositoryModule_RepositoryLocal$app_debugFactory;
import ru.mrroot.translator.di.module.RepositoryModule_RepositoryRemote$app_debugFactory;
import ru.mrroot.translator.model.data.DataModel;
import ru.mrroot.translator.model.datasource.DataSource;
import ru.mrroot.translator.model.repository.Repository;
import ru.mrroot.translator.rx.SchedulerProvider_Factory;
import ru.mrroot.translator.view.main.MainActivity;
import ru.mrroot.translator.view.main.MainActivity_MembersInjector;
import ru.mrroot.translator.view.main.MainInteractor;
import ru.mrroot.translator.view.main.MainInteractor_Factory;
import ru.mrroot.translator.view.main.MainViewModel;
import ru.mrroot.translator.view.main.MainViewModel_Factory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<DataSource<List<DataModel>>> dataSourceRemoteProvider;

  private Provider<Repository<List<DataModel>>> repositoryRemote$app_debugProvider;

  private Provider<DataSource<List<DataModel>>> dataSourceLocalProvider;

  private Provider<Repository<List<DataModel>>> repositoryLocal$app_debugProvider;

  private Provider<MainInteractor> mainInteractorProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(RepositoryModule repositoryModuleParam) {

    initialize(repositoryModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RepositoryModule repositoryModuleParam) {
    this.dataSourceRemoteProvider = DoubleCheck.provider(RepositoryModule_DataSourceRemoteFactory.create(repositoryModuleParam));
    this.repositoryRemote$app_debugProvider = DoubleCheck.provider(RepositoryModule_RepositoryRemote$app_debugFactory.create(repositoryModuleParam, dataSourceRemoteProvider));
    this.dataSourceLocalProvider = DoubleCheck.provider(RepositoryModule_DataSourceLocalFactory.create(repositoryModuleParam));
    this.repositoryLocal$app_debugProvider = DoubleCheck.provider(RepositoryModule_RepositoryLocal$app_debugFactory.create(repositoryModuleParam, dataSourceLocalProvider));
    this.mainInteractorProvider = MainInteractor_Factory.create(repositoryRemote$app_debugProvider, repositoryLocal$app_debugProvider);
    this.mainViewModelProvider = MainViewModel_Factory.create(mainInteractorProvider, SchedulerProvider_Factory.create());
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(MainViewModel.class, (Provider) mainViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private RepositoryModule repositoryModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public AppComponent build() {
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      return new DaggerAppComponent(repositoryModule);
    }
  }
}
