// Generated by Dagger (https://dagger.dev).
package ru.mrroot.translator.view.main;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.mrroot.translator.rx.SchedulerProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<MainInteractor> interactorProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  public MainViewModel_Factory(Provider<MainInteractor> interactorProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    this.interactorProvider = interactorProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(interactorProvider.get(), schedulerProvider.get());
  }

  public static MainViewModel_Factory create(Provider<MainInteractor> interactorProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    return new MainViewModel_Factory(interactorProvider, schedulerProvider);
  }

  public static MainViewModel newInstance(MainInteractor interactor,
      SchedulerProvider schedulerProvider) {
    return new MainViewModel(interactor, schedulerProvider);
  }
}
