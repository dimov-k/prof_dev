// Generated by Dagger (https://dagger.dev).
package ru.mrroot.translator.view.main;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import java.util.List;
import javax.inject.Provider;
import ru.mrroot.translator.model.data.DataModel;
import ru.mrroot.translator.model.repository.Repository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainInteractor_Factory implements Factory<MainInteractor> {
  private final Provider<Repository<List<DataModel>>> repositoryRemoteProvider;

  private final Provider<Repository<List<DataModel>>> repositoryLocalProvider;

  public MainInteractor_Factory(Provider<Repository<List<DataModel>>> repositoryRemoteProvider,
      Provider<Repository<List<DataModel>>> repositoryLocalProvider) {
    this.repositoryRemoteProvider = repositoryRemoteProvider;
    this.repositoryLocalProvider = repositoryLocalProvider;
  }

  @Override
  public MainInteractor get() {
    return newInstance(repositoryRemoteProvider.get(), repositoryLocalProvider.get());
  }

  public static MainInteractor_Factory create(
      Provider<Repository<List<DataModel>>> repositoryRemoteProvider,
      Provider<Repository<List<DataModel>>> repositoryLocalProvider) {
    return new MainInteractor_Factory(repositoryRemoteProvider, repositoryLocalProvider);
  }

  public static MainInteractor newInstance(Repository<List<DataModel>> repositoryRemote,
      Repository<List<DataModel>> repositoryLocal) {
    return new MainInteractor(repositoryRemote, repositoryLocal);
  }
}
